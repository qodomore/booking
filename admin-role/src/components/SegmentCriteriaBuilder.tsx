import React from 'react';
import { Plus, X } from 'lucide-react';
import { Button } from './ui/button';
import { Label } from './ui/label';
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from './ui/select';
import { Badge } from './ui/badge';

interface CriteriaOption {
  value: string;
  label: { ru: string; en: string };
}

interface Subcriterion {
  name: { ru: string; en: string };
  options: CriteriaOption[];
}

interface CriteriaCategory {
  id: string;
  name: { ru: string; en: string };
  icon: string;
  subcriteria: { [key: string]: Subcriterion };
}

interface SegmentCriteriaBuilderProps {
  locale: 'ru' | 'en';
  selectedCategories: string[];
  criteriaValues: { [key: string]: any };
  onAddCategory: (categoryId: string) => void;
  onRemoveCategory: (categoryId: string) => void;
  onCriteriaValueChange: (key: string, value: string) => void;
}

export const SegmentCriteriaBuilder: React.FC<SegmentCriteriaBuilderProps> = ({
  locale,
  selectedCategories,
  criteriaValues,
  onAddCategory,
  onRemoveCategory,
  onCriteriaValueChange
}) => {
  const criteriaCategories: { [key: string]: CriteriaCategory } = {
    client: {
      id: 'client',
      name: { ru: '–ö–ª–∏–µ–Ω—Ç', en: 'Client' },
      icon: 'üë§',
      subcriteria: {
        age: {
          name: { ru: '–í–æ–∑—Ä–∞—Å—Ç', en: 'Age' },
          options: [
            { value: '18-25', label: { ru: '18-25 –ª–µ—Ç', en: '18-25 years' } },
            { value: '26-35', label: { ru: '26-35 –ª–µ—Ç', en: '26-35 years' } },
            { value: '36-45', label: { ru: '36-45 –ª–µ—Ç', en: '36-45 years' } },
            { value: '46-60', label: { ru: '46-60 –ª–µ—Ç', en: '46-60 years' } },
            { value: '60+', label: { ru: '60+ –ª–µ—Ç', en: '60+ years' } }
          ]
        },
        gender: {
          name: { ru: '–ü–æ–ª', en: 'Gender' },
          options: [
            { value: 'male', label: { ru: '–ú—É–∂—Å–∫–æ–π', en: 'Male' } },
            { value: 'female', label: { ru: '–ñ–µ–Ω—Å–∫–∏–π', en: 'Female' } },
            { value: 'other', label: { ru: '–î—Ä—É–≥–æ–π', en: 'Other' } }
          ]
        },
        city: {
          name: { ru: '–ì–æ—Ä–æ–¥', en: 'City' },
          options: [
            { value: 'moscow', label: { ru: '–ú–æ—Å–∫–≤–∞', en: 'Moscow' } },
            { value: 'spb', label: { ru: '–°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥', en: 'St. Petersburg' } },
            { value: 'other', label: { ru: '–î—Ä—É–≥–∏–µ –≥–æ—Ä–æ–¥–∞', en: 'Other cities' } }
          ]
        },
        registrationDate: {
          name: { ru: '–î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏', en: 'Registration Date' },
          options: [
            { value: '7d', label: { ru: '–ü–æ—Å–ª–µ–¥–Ω–∏–µ 7 –¥–Ω–µ–π', en: 'Last 7 days' } },
            { value: '30d', label: { ru: '–ü–æ—Å–ª–µ–¥–Ω–∏–µ 30 –¥–Ω–µ–π', en: 'Last 30 days' } },
            { value: '90d', label: { ru: '–ü–æ—Å–ª–µ–¥–Ω–∏–µ 90 –¥–Ω–µ–π', en: 'Last 90 days' } },
            { value: '180d', label: { ru: '–ë–æ–ª–µ–µ 180 –¥–Ω–µ–π', en: 'More than 180 days' } }
          ]
        }
      }
    },
    visits: {
      id: 'visits',
      name: { ru: '–ò—Å—Ç–æ—Ä–∏—è –≤–∏–∑–∏—Ç–æ–≤', en: 'Visit History' },
      icon: 'üìÖ',
      subcriteria: {
        lastVisit: {
          name: { ru: '–ü–æ—Å–ª–µ–¥–Ω–∏–π –≤–∏–∑–∏—Ç', en: 'Last Visit' },
          options: [
            { value: '7d', label: { ru: '–ú–µ–Ω–µ–µ 7 –¥–Ω–µ–π', en: '<7 days' } },
            { value: '30d', label: { ru: '–ë–æ–ª–µ–µ 30 –¥–Ω–µ–π', en: '>30 days' } },
            { value: '60d', label: { ru: '–ë–æ–ª–µ–µ 60 –¥–Ω–µ–π', en: '>60 days' } },
            { value: '90d', label: { ru: '–ë–æ–ª–µ–µ 90 –¥–Ω–µ–π', en: '>90 days' } },
            { value: '180d', label: { ru: '–ë–æ–ª–µ–µ 180 –¥–Ω–µ–π', en: '>180 days' } }
          ]
        },
        visitCount: {
          name: { ru: '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–∏–∑–∏—Ç–æ–≤', en: 'Visit Count' },
          options: [
            { value: '1-3', label: { ru: '1-3 –≤–∏–∑–∏—Ç–∞', en: '1-3 visits' } },
            { value: '4-9', label: { ru: '4-9 –≤–∏–∑–∏—Ç–æ–≤', en: '4-9 visits' } },
            { value: '10-19', label: { ru: '10-19 –≤–∏–∑–∏—Ç–æ–≤', en: '10-19 visits' } },
            { value: '20+', label: { ru: '20+ –≤–∏–∑–∏—Ç–æ–≤', en: '20+ visits' } }
          ]
        },
        frequency: {
          name: { ru: '–ß–∞—Å—Ç–æ—Ç–∞ –≤–∏–∑–∏—Ç–æ–≤', en: 'Visit Frequency' },
          options: [
            { value: 'weekly', label: { ru: '–ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω–æ', en: 'Weekly' } },
            { value: 'monthly', label: { ru: '–ï–∂–µ–º–µ—Å—è—á–Ω–æ', en: 'Monthly' } },
            { value: 'quarterly', label: { ru: '–†–∞–∑ –≤ –∫–≤–∞—Ä—Ç–∞–ª', en: 'Quarterly' } },
            { value: 'rare', label: { ru: '–†–µ–¥–∫–æ', en: 'Rare' } }
          ]
        }
      }
    },
    finance: {
      id: 'finance',
      name: { ru: '–§–∏–Ω–∞–Ω—Å—ã', en: 'Finance' },
      icon: 'üí∞',
      subcriteria: {
        totalSpent: {
          name: { ru: '–û–±—â–∞—è —Å—É–º–º–∞', en: 'Total Spent' },
          options: [
            { value: '0-5000', label: { ru: '0-5K‚ÇΩ', en: '0-5K‚ÇΩ' } },
            { value: '5000-20000', label: { ru: '5-20K‚ÇΩ', en: '5-20K‚ÇΩ' } },
            { value: '20000-50000', label: { ru: '20-50K‚ÇΩ', en: '20-50K‚ÇΩ' } },
            { value: '50000+', label: { ru: '50K‚ÇΩ+', en: '50K‚ÇΩ+' } }
          ]
        },
        avgSpent: {
          name: { ru: '–°—Ä–µ–¥–Ω–∏–π —á–µ–∫', en: 'Avg Spent' },
          options: [
            { value: '0-1000', label: { ru: '0-1K‚ÇΩ', en: '0-1K‚ÇΩ' } },
            { value: '1000-3000', label: { ru: '1-3K‚ÇΩ', en: '1-3K‚ÇΩ' } },
            { value: '3000-5000', label: { ru: '3-5K‚ÇΩ', en: '3-5K‚ÇΩ' } },
            { value: '5000+', label: { ru: '5K‚ÇΩ+', en: '5K‚ÇΩ+' } }
          ]
        },
        maxSpent: {
          name: { ru: '–ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —á–µ–∫', en: 'Max Spent' },
          options: [
            { value: '0-3000', label: { ru: '0-3K‚ÇΩ', en: '0-3K‚ÇΩ' } },
            { value: '3000-10000', label: { ru: '3-10K‚ÇΩ', en: '3-10K‚ÇΩ' } },
            { value: '10000+', label: { ru: '10K‚ÇΩ+', en: '10K‚ÇΩ+' } }
          ]
        }
      }
    },
    location: {
      id: 'location',
      name: { ru: '–¢–æ—á–∫–∏ –æ–∫–∞–∑–∞–Ω–∏—è —É—Å–ª—É–≥', en: 'Locations' },
      icon: 'üìç',
      subcriteria: {
        specificLocation: {
          name: { ru: '–ö–æ–Ω–∫—Ä–µ—Ç–Ω–∞—è —Ç–æ—á–∫–∞', en: 'Specific Location' },
          options: [
            { value: 'location-1', label: { ru: '–§–∏–ª–∏–∞–ª –Ω–∞ –¢–≤–µ—Ä—Å–∫–æ–π', en: 'Tverskaya Branch' } },
            { value: 'location-2', label: { ru: '–§–∏–ª–∏–∞–ª –Ω–∞ –ê—Ä–±–∞—Ç–µ', en: 'Arbat Branch' } },
            { value: 'location-3', label: { ru: '–§–∏–ª–∏–∞–ª –Ω–∞ –ö—É—Ç—É–∑–æ–≤—Å–∫–æ–º', en: 'Kutuzovsky Branch' } }
          ]
        },
        locationCity: {
          name: { ru: '–ì–æ—Ä–æ–¥ —Ç–æ—á–∫–∏', en: 'City' },
          options: [
            { value: 'moscow', label: { ru: '–ú–æ—Å–∫–≤–∞', en: 'Moscow' } },
            { value: 'spb', label: { ru: '–°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥', en: 'St. Petersburg' } }
          ]
        }
      }
    },
    services: {
      id: 'services',
      name: { ru: '–£—Å–ª—É–≥–∏', en: 'Services' },
      icon: '‚úÇÔ∏è',
      subcriteria: {
        specificService: {
          name: { ru: '–ö–æ–Ω–∫—Ä–µ—Ç–Ω–∞—è —É—Å–ª—É–≥–∞', en: 'Specific Service' },
          options: [
            { value: 'service-1', label: { ru: '–ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è', en: 'Consultation' } },
            { value: 'service-2', label: { ru: '–ë–∞–∑–æ–≤–∞—è —É—Å–ª—É–≥–∞', en: 'Basic Service' } },
            { value: 'service-3', label: { ru: '–ü—Ä–µ–º–∏—É–º —É—Å–ª—É–≥–∞', en: 'Premium Service' } }
          ]
        },
        serviceCategory: {
          name: { ru: '–ö–∞—Ç–µ–≥–æ—Ä–∏—è —É—Å–ª—É–≥', en: 'Service Category' },
          options: [
            { value: 'cat-1', label: { ru: '–ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏', en: 'Consultations' } },
            { value: 'cat-2', label: { ru: '–û—Å–Ω–æ–≤–Ω—ã–µ —É—Å–ª—É–≥–∏', en: 'Main Services' } },
            { value: 'cat-3', label: { ru: '–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —É—Å–ª—É–≥–∏', en: 'Additional Services' } }
          ]
        },
        serviceFrequency: {
          name: { ru: '–ß–∞—Å—Ç–æ—Ç–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è', en: 'Usage Frequency' },
          options: [
            { value: 'regular', label: { ru: '–†–µ–≥—É–ª—è—Ä–Ω–æ', en: 'Regular' } },
            { value: 'occasional', label: { ru: '–ò–Ω–æ–≥–¥–∞', en: 'Occasional' } },
            { value: 'rare', label: { ru: '–†–µ–¥–∫–æ', en: 'Rare' } }
          ]
        }
      }
    },
    behavior: {
      id: 'behavior',
      name: { ru: '–ü–æ–≤–µ–¥–µ–Ω–∏–µ', en: 'Behavior' },
      icon: 'üéØ',
      subcriteria: {
        cancellations: {
          name: { ru: '–û—Ç–º–µ–Ω—ã –∑–∞–ø–∏—Å–µ–π', en: 'Cancellations' },
          options: [
            { value: 'none', label: { ru: '–ë–µ–∑ –æ—Ç–º–µ–Ω', en: 'No cancellations' } },
            { value: '1-2', label: { ru: '1-2 –æ—Ç–º–µ–Ω—ã', en: '1-2 cancellations' } },
            { value: '3+', label: { ru: '3+ –æ—Ç–º–µ–Ω', en: '3+ cancellations' } }
          ]
        },
        noShows: {
          name: { ru: '–ù–µ—è–≤–∫–∏', en: 'No-shows' },
          options: [
            { value: 'none', label: { ru: '–ë–µ–∑ –Ω–µ—è–≤–æ–∫', en: 'No no-shows' } },
            { value: '1-2', label: { ru: '1-2 –Ω–µ—è–≤–∫–∏', en: '1-2 no-shows' } },
            { value: '3+', label: { ru: '3+ –Ω–µ—è–≤–æ–∫', en: '3+ no-shows' } }
          ]
        },
        reviews: {
          name: { ru: '–û—Ç–∑—ã–≤—ã', en: 'Reviews' },
          options: [
            { value: 'positive', label: { ru: '–ü–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–µ', en: 'Positive' } },
            { value: 'neutral', label: { ru: '–ù–µ–π—Ç—Ä–∞–ª—å–Ω—ã–µ', en: 'Neutral' } },
            { value: 'negative', label: { ru: '–û—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–µ', en: 'Negative' } },
            { value: 'none', label: { ru: '–ë–µ–∑ –æ—Ç–∑—ã–≤–æ–≤', en: 'No reviews' } }
          ]
        },
        referrals: {
          name: { ru: '–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏', en: 'Referrals' },
          options: [
            { value: 'yes', label: { ru: '–ü—Ä–∏–≤–æ–¥–∏–ª –¥—Ä—É–∑–µ–π', en: 'Brought friends' } },
            { value: 'no', label: { ru: '–ù–µ –ø—Ä–∏–≤–æ–¥–∏–ª', en: 'No referrals' } }
          ]
        }
      }
    }
  };

  const availableCategories = Object.values(criteriaCategories).filter(
    cat => !selectedCategories.includes(cat.id)
  );

  return (
    <div className="space-y-4">
      {/* Add Category Button */}
      {availableCategories.length > 0 && (
        <div className="space-y-2">
          <Label className="text-base">{locale === 'ru' ? '–î–æ–±–∞–≤–∏—Ç—å –∫—Ä–∏—Ç–µ—Ä–∏–π' : 'Add Criteria'}</Label>
          <div className="flex flex-wrap gap-2">
            {availableCategories.map(category => (
              <Button
                key={category.id}
                variant="outline"
                size="sm"
                onClick={() => onAddCategory(category.id)}
                className="h-auto py-2 px-3"
              >
                <span className="mr-2">{category.icon}</span>
                <span className="text-sm">{category.name[locale]}</span>
              </Button>
            ))}
          </div>
        </div>
      )}

      {/* Selected Categories with Subcriteria */}
      {selectedCategories.length > 0 && (
        <div className="space-y-3">
          {selectedCategories.map(categoryId => {
            const category = criteriaCategories[categoryId];
            if (!category) return null;

            return (
              <div key={categoryId} className="p-4 border rounded-lg space-y-3 bg-muted/30">
                {/* Category Header */}
                <div className="flex items-center justify-between">
                  <div className="flex items-center gap-2">
                    <span className="text-lg">{category.icon}</span>
                    <span className="font-medium">{category.name[locale]}</span>
                  </div>
                  <Button
                    variant="ghost"
                    size="sm"
                    onClick={() => onRemoveCategory(categoryId)}
                    className="h-7 w-7 p-0"
                  >
                    <X className="w-4 h-4" />
                  </Button>
                </div>

                {/* Subcriteria */}
                <div className="grid gap-3 sm:grid-cols-2">
                  {Object.entries(category.subcriteria).map(([subKey, subcriterion]) => {
                    const criteriaKey = `${categoryId}-${subKey}`;
                    return (
                      <div key={subKey} className="space-y-2">
                        <Label htmlFor={criteriaKey} className="text-sm">
                          {subcriterion.name[locale]}
                        </Label>
                        <Select
                          value={criteriaValues[criteriaKey] || ''}
                          onValueChange={(value) => onCriteriaValueChange(criteriaKey, value)}
                        >
                          <SelectTrigger id={criteriaKey}>
                            <SelectValue placeholder={locale === 'ru' ? '–í—ã–±–µ—Ä–∏—Ç–µ' : 'Select'} />
                          </SelectTrigger>
                          <SelectContent>
                            {subcriterion.options.map((option) => (
                              <SelectItem key={option.value} value={option.value}>
                                {option.label[locale]}
                              </SelectItem>
                            ))}
                          </SelectContent>
                        </Select>
                      </div>
                    );
                  })}
                </div>
              </div>
            );
          })}
        </div>
      )}

      {/* Empty State */}
      {selectedCategories.length === 0 && (
        <div className="p-6 border-2 border-dashed rounded-lg text-center">
          <p className="text-sm text-muted-foreground">
            {locale === 'ru' 
              ? '–î–æ–±–∞–≤—å—Ç–µ –∫—Ä–∏—Ç–µ—Ä–∏–∏ –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –∞—É–¥–∏—Ç–æ—Ä–∏–∏' 
              : 'Add criteria to filter audience'}
          </p>
        </div>
      )}
    </div>
  );
};
