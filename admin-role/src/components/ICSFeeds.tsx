import React, { useState } from 'react';
import { Calendar, Copy, RefreshCw, Lock, Zap, Info, Check, AlertTriangle, ChevronDown, ChevronUp, ExternalLink } from 'lucide-react';
import { Card, CardContent, CardHeader, CardTitle } from './ui/card';
import { Button } from './ui/button';
import { Badge } from './ui/badge';
import { Input } from './ui/input';
import { Label } from './ui/label';
import { Tooltip, TooltipContent, TooltipProvider, TooltipTrigger } from './ui/tooltip';
import { AlertDialog, AlertDialogAction, AlertDialogCancel, AlertDialogContent, AlertDialogDescription, AlertDialogFooter, AlertDialogHeader, AlertDialogTitle, AlertDialogTrigger } from './ui/alert-dialog';
import { Collapsible, CollapsibleContent, CollapsibleTrigger } from './ui/collapsible';
import { toast } from 'sonner';

interface ICSFeed {
  id: string;
  resourceName: string;
  resourceType: string;
  url: string;
  active: boolean;
}

interface ICSFeedsProps {
  locale?: 'ru' | 'en';
  plan?: 'free' | 'pro';
  isAdmin?: boolean;
  theme?: string;
}

const mockFeeds: ICSFeed[] = [
  {
    id: '1',
    resourceName: '–ê–Ω–Ω–∞ –°–º–∏—Ä–Ω–æ–≤–∞',
    resourceType: '–ú–∞—Å—Ç–µ—Ä –º–∞–Ω–∏–∫—é—Ä–∞',
    url: 'https://api.business.app/ics/feed/anna-smirnova-abc123def456',
    active: true
  },
  {
    id: '2',
    resourceName: '–ö–∞–±–∏–Ω–µ—Ç ‚Ññ1',
    resourceType: '–ü–æ–º–µ—â–µ–Ω–∏–µ',
    url: 'https://api.business.app/ics/feed/room-1-xyz789ghi012',
    active: true
  },
  {
    id: '3',
    resourceName: '–ú–∞—Ä–∏—è –ö–æ–∑–ª–æ–≤–∞',
    resourceType: '–ú–∞—Å—Ç–µ—Ä –ø–µ–¥–∏–∫—é—Ä–∞',
    url: 'https://api.business.app/ics/feed/maria-kozlova-jkl345mno678',
    active: true
  },
  {
    id: '4',
    resourceName: '–ö–∞–±–∏–Ω–µ—Ç VIP',
    resourceType: '–ü–æ–º–µ—â–µ–Ω–∏–µ',
    url: 'https://api.business.app/ics/feed/vip-room-pqr901stu234',
    active: false
  }
];

export function ICSFeeds({ locale = 'ru', plan = 'free', isAdmin = true, theme = 'blue' }: ICSFeedsProps) {
  const [feeds, setFeeds] = useState<ICSFeed[]>(mockFeeds);
  const [regeneratingId, setRegeneratingId] = useState<string | null>(null);
  const [isInstructionsOpen, setIsInstructionsOpen] = useState(false);

  // Text content
  const text = {
    ru: {
      title: '–ö–∞–ª–µ–Ω–¥–∞—Ä–Ω—ã–µ —Ñ–∏–¥—ã (ICS)',
      subtitle: '–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å –≤–Ω–µ—à–Ω–∏–º–∏ –∫–∞–ª–µ–Ω–¥–∞—Ä—è–º–∏',
      infoTooltip: '–ü–æ–¥–ø–∏—Å–∫–∞ –≤ Google/Apple Calendar. –ò–∑–º–µ–Ω–µ–Ω–∏—è –¥–µ–ª–∞–π—Ç–µ –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏.',
      resourceColumn: '–†–µ—Å—É—Ä—Å',
      urlColumn: 'URL —Ñ–∏–¥–∞',
      actionsColumn: '–î–µ–π—Å—Ç–≤–∏—è',
      copy: '–ö–æ–ø–∏—Ä–æ–≤–∞—Ç—å',
      regenerate: '–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å',
      readOnly: 'Read-only',
      active: '–ê–∫—Ç–∏–≤–µ–Ω',
      inactive: '–ù–µ–∞–∫—Ç–∏–≤–µ–Ω',
      copied: '–°–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–æ',
      confirmTitle: '–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –Ω–æ–≤—ã–π URL?',
      confirmDescription: '–°—Ç–∞—Ä—ã–π URL –ø–µ—Ä–µ—Å—Ç–∞–Ω–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å. –í—Å–µ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ –∫–∞–ª–µ–Ω–¥–∞—Ä—å –Ω—É–∂–Ω–æ –±—É–¥–µ—Ç –æ–±–Ω–æ–≤–∏—Ç—å.',
      confirmCancel: '–û—Ç–º–µ–Ω–∞',
      confirmRegenerate: '–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å',
      newUrlCreated: '–°–æ–∑–¥–∞–Ω –Ω–æ–≤—ã–π –∞–¥—Ä–µ—Å',
      proFeature: '–î–æ—Å—Ç—É–ø–Ω–æ –≤ Pro',
      unlockPro: '–†–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å Pro',
      proDescription: '–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —Å –≤–Ω–µ—à–Ω–∏–º–∏ –∫–∞–ª–µ–Ω–¥–∞—Ä—è–º–∏ —É–≤–µ–ª–∏—á–∏–≤–∞–µ—Ç —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–∞ 40%',
      howToUse: '–ö–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å',
      instructionsTitle: '–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –∫–∞–ª–µ–Ω–¥–∞—Ä—é',
      instructionsIntro: 'ICS-—Ñ–∏–¥—ã –ø–æ–∑–≤–æ–ª—è—é—Ç –≤–∏–¥–µ—Ç—å –∑–∞–ø–∏—Å–∏ –∏–∑ –Ω–∞—à–µ–≥–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –≤ –≤–∞—à–µ–º –ª—é–±–∏–º–æ–º –∫–∞–ª–µ–Ω–¥–∞—Ä–µ. –í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é –¥–ª—è –≤–∞—à–µ–≥–æ –∫–∞–ª–µ–Ω–¥–∞—Ä—è:',
      googleCalendar: 'Google Calendar',
      appleCalendar: 'Apple Calendar',
      outlookCalendar: 'Outlook',
      googleSteps: [
        '–°–∫–æ–ø–∏—Ä—É–π—Ç–µ URL —Ñ–∏–¥–∞ –¥–ª—è –Ω—É–∂–Ω–æ–≥–æ —Ä–µ—Å—É—Ä—Å–∞',
        '–û—Ç–∫—Ä–æ–π—Ç–µ Google Calendar –Ω–∞ –∫–æ–º–ø—å—é—Ç–µ—Ä–µ',
        '–ù–∞–∂–º–∏—Ç–µ "+" —Ä—è–¥–æ–º —Å "–î—Ä—É–≥–∏–µ –∫–∞–ª–µ–Ω–¥–∞—Ä–∏" —Å–ª–µ–≤–∞',
        '–í—ã–±–µ—Ä–∏—Ç–µ "–î–æ–±–∞–≤–∏—Ç—å –ø–æ URL"',
        '–í—Å—Ç–∞–≤—å—Ç–µ —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–Ω—ã–π URL –∏ –Ω–∞–∂–º–∏—Ç–µ "–î–æ–±–∞–≤–∏—Ç—å"',
        '–ö–∞–ª–µ–Ω–¥–∞—Ä—å –ø–æ—è–≤–∏—Ç—Å—è –≤ —Å–ø–∏—Å–∫–µ —á–µ—Ä–µ–∑ –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç'
      ],
      appleSteps: [
        '–°–∫–æ–ø–∏—Ä—É–π—Ç–µ URL —Ñ–∏–¥–∞ –¥–ª—è –Ω—É–∂–Ω–æ–≥–æ —Ä–µ—Å—É—Ä—Å–∞',
        '–û—Ç–∫—Ä–æ–π—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –ö–∞–ª–µ–Ω–¥–∞—Ä—å –Ω–∞ Mac/iPhone/iPad',
        '–í –º–µ–Ω—é –≤—ã–±–µ—Ä–∏—Ç–µ "–§–∞–π–ª" ‚Üí "–ù–æ–≤–∞—è –ø–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –∫–∞–ª–µ–Ω–¥–∞—Ä—å"',
        '–í—Å—Ç–∞–≤—å—Ç–µ —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–Ω—ã–π URL',
        '–ù–∞–∂–º–∏—Ç–µ "–ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è" –∏ –Ω–∞—Å—Ç—Ä–æ–π—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã',
        '–ö–∞–ª–µ–Ω–¥–∞—Ä—å —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏'
      ],
      outlookSteps: [
        '–°–∫–æ–ø–∏—Ä—É–π—Ç–µ URL —Ñ–∏–¥–∞ –¥–ª—è –Ω—É–∂–Ω–æ–≥–æ —Ä–µ—Å—É—Ä—Å–∞',
        '–û—Ç–∫—Ä–æ–π—Ç–µ Outlook Calendar',
        '–ù–∞–∂–º–∏—Ç–µ "–î–æ–±–∞–≤–∏—Ç—å –∫–∞–ª–µ–Ω–¥–∞—Ä—å" ‚Üí "–ü–æ–¥–ø–∏—Å–∫–∞ –∏–∑ –ò–Ω—Ç–µ—Ä–Ω–µ—Ç–∞"',
        '–í—Å—Ç–∞–≤—å—Ç–µ URL –≤ –ø–æ–ª–µ "–°—Å—ã–ª–∫–∞ –Ω–∞ –∫–∞–ª–µ–Ω–¥–∞—Ä—å"',
        '–í–≤–µ–¥–∏—Ç–µ –∏–º—è –∏ –Ω–∞–∂–º–∏—Ç–µ "–ò–º–ø–æ—Ä—Ç"',
        '–ü–æ–¥–ø–∏—Å–∫–∞ –±—É–¥–µ—Ç –æ–±–Ω–æ–≤–ª—è—Ç—å—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏'
      ],
      importantNote: '–í–∞–∂–Ω–æ',
      importantText: '–ö–∞–ª–µ–Ω–¥–∞—Ä—å –¥–æ—Å—Ç—É–ø–µ–Ω —Ç–æ–ª—å–∫–æ –¥–ª—è —á—Ç–µ–Ω–∏—è. –í—Å–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤–Ω–æ—Å–∏—Ç–µ –≤ –Ω–∞—à–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ ‚Äî –æ–Ω–∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–æ—è–≤—è—Ç—Å—è –≤ –ø–æ–¥–ø–∏—Å–∞–Ω–Ω–æ–º –∫–∞–ª–µ–Ω–¥–∞—Ä–µ.'
    },
    en: {
      title: 'Calendar feeds (ICS)',
      subtitle: 'Integration with external calendars',
      infoTooltip: 'Subscription in Google/Apple Calendar. Make changes in the app.',
      resourceColumn: 'Resource',
      urlColumn: 'Feed URL',
      actionsColumn: 'Actions',
      copy: 'Copy',
      regenerate: 'Regenerate',
      readOnly: 'Read-only',
      active: 'Active',
      inactive: 'Inactive',
      copied: 'Copied',
      confirmTitle: 'Generate new URL?',
      confirmDescription: 'The old URL will stop working. All calendar subscriptions will need to be updated.',
      confirmCancel: 'Cancel',
      confirmRegenerate: 'Regenerate',
      newUrlCreated: 'Created new address',
      proFeature: 'Available in Pro',
      unlockPro: 'Unlock Pro',
      proDescription: 'Synchronization with external calendars increases planning efficiency by 40%',
      howToUse: 'How to use',
      instructionsTitle: 'Calendar connection',
      instructionsIntro: 'ICS feeds allow you to see bookings from our app in your favorite calendar. Choose instructions for your calendar:',
      googleCalendar: 'Google Calendar',
      appleCalendar: 'Apple Calendar',
      outlookCalendar: 'Outlook',
      googleSteps: [
        'Copy the feed URL for the desired resource',
        'Open Google Calendar on your computer',
        'Click "+" next to "Other calendars" on the left',
        'Select "From URL"',
        'Paste the copied URL and click "Add calendar"',
        'Calendar will appear in the list within a few minutes'
      ],
      appleSteps: [
        'Copy the feed URL for the desired resource',
        'Open Calendar app on Mac/iPhone/iPad',
        'In menu select "File" ‚Üí "New Calendar Subscription"',
        'Paste the copied URL',
        'Click "Subscribe" and configure settings',
        'Calendar will sync automatically'
      ],
      outlookSteps: [
        'Copy the feed URL for the desired resource',
        'Open Outlook Calendar',
        'Click "Add calendar" ‚Üí "Subscribe from web"',
        'Paste URL in "Link to calendar" field',
        'Enter name and click "Import"',
        'Subscription will update automatically'
      ],
      importantNote: 'Important',
      importantText: 'Calendar is read-only. Make all changes in our app ‚Äî they will automatically appear in the subscribed calendar.'
    }
  };

  const t = text[locale];

  const handleCopy = async (url: string) => {
    try {
      await navigator.clipboard.writeText(url);
      toast.success(t.copied);
    } catch (err) {
      // Fallback for older browsers
      const textArea = document.createElement('textarea');
      textArea.value = url;
      document.body.appendChild(textArea);
      textArea.select();
      document.execCommand('copy');
      document.body.removeChild(textArea);
      toast.success(t.copied);
    }
  };

  const handleRegenerate = (feedId: string) => {
    setRegeneratingId(feedId);
    
    // Simulate API call
    setTimeout(() => {
      setFeeds(prev => prev.map(feed => 
        feed.id === feedId 
          ? { ...feed, url: `${feed.url.split('-').slice(0, -1).join('-')}-${Math.random().toString(36).substr(2, 9)}` }
          : feed
      ));
      
      setRegeneratingId(null);
      toast.success(t.newUrlCreated);
    }, 1500);
  };

  const getResourceTypeIcon = (type: string) => {
    if (type.toLowerCase().includes('–ø–æ–º–µ—â–µ–Ω–∏–µ') || type.toLowerCase().includes('–∫–∞–±–∏–Ω–µ—Ç') || type.toLowerCase().includes('room')) {
      return 'üè†';
    }
    return 'üë§';
  };

  const isLocked = !isAdmin || plan !== 'pro';

  return (
    <TooltipProvider>
      <Card className={isLocked ? 'relative' : ''}>
        <CardHeader>
          <CardTitle className="flex items-center gap-2">
            <Calendar className="w-5 h-5" />
            {t.title}
            <Tooltip>
              <TooltipTrigger asChild>
                <Info className="w-4 h-4 text-muted-foreground cursor-help" />
              </TooltipTrigger>
              <TooltipContent>
                <p className="max-w-64">{t.infoTooltip}</p>
              </TooltipContent>
            </Tooltip>
          </CardTitle>
          <p className="text-sm text-muted-foreground">{t.subtitle}</p>
        </CardHeader>
        
        <CardContent>
          {!isLocked ? (
            <div className="space-y-4">
              {/* Instructions Collapsible */}
              <Collapsible open={isInstructionsOpen} onOpenChange={setIsInstructionsOpen}>
                <CollapsibleTrigger asChild>
                  <Button 
                    variant="outline" 
                    className="w-full justify-between h-auto p-3 hover:bg-accent"
                  >
                    <div className="flex items-center gap-2">
                      <Info className="w-4 h-4 text-primary" />
                      <span className="font-medium">{t.howToUse}</span>
                    </div>
                    {isInstructionsOpen ? (
                      <ChevronUp className="w-4 h-4" />
                    ) : (
                      <ChevronDown className="w-4 h-4" />
                    )}
                  </Button>
                </CollapsibleTrigger>
                <CollapsibleContent className="mt-3">
                  <Card className="bg-muted/30">
                    <CardContent className="p-4 space-y-4">
                      <div>
                        <h4 className="font-medium mb-2">{t.instructionsTitle}</h4>
                        <p className="text-sm text-muted-foreground mb-4">{t.instructionsIntro}</p>
                      </div>

                      {/* Google Calendar Instructions */}
                      <div className="space-y-2">
                        <div className="flex items-center gap-2">
                          <div className="w-8 h-8 bg-white rounded flex items-center justify-center">
                            <span className="text-lg">üìÖ</span>
                          </div>
                          <h5 className="font-medium">{t.googleCalendar}</h5>
                        </div>
                        <ol className="space-y-1.5 ml-10 text-sm text-muted-foreground">
                          {t.googleSteps.map((step, index) => (
                            <li key={index} className="flex gap-2">
                              <span className="font-medium text-foreground min-w-[20px]">{index + 1}.</span>
                              <span>{step}</span>
                            </li>
                          ))}
                        </ol>
                      </div>

                      {/* Apple Calendar Instructions */}
                      <div className="space-y-2">
                        <div className="flex items-center gap-2">
                          <div className="w-8 h-8 bg-white rounded flex items-center justify-center">
                            <span className="text-lg">üçé</span>
                          </div>
                          <h5 className="font-medium">{t.appleCalendar}</h5>
                        </div>
                        <ol className="space-y-1.5 ml-10 text-sm text-muted-foreground">
                          {t.appleSteps.map((step, index) => (
                            <li key={index} className="flex gap-2">
                              <span className="font-medium text-foreground min-w-[20px]">{index + 1}.</span>
                              <span>{step}</span>
                            </li>
                          ))}
                        </ol>
                      </div>

                      {/* Outlook Instructions */}
                      <div className="space-y-2">
                        <div className="flex items-center gap-2">
                          <div className="w-8 h-8 bg-white rounded flex items-center justify-center">
                            <span className="text-lg">üìß</span>
                          </div>
                          <h5 className="font-medium">{t.outlookCalendar}</h5>
                        </div>
                        <ol className="space-y-1.5 ml-10 text-sm text-muted-foreground">
                          {t.outlookSteps.map((step, index) => (
                            <li key={index} className="flex gap-2">
                              <span className="font-medium text-foreground min-w-[20px]">{index + 1}.</span>
                              <span>{step}</span>
                            </li>
                          ))}
                        </ol>
                      </div>

                      {/* Important Note */}
                      <div className="flex items-start gap-2 p-3 bg-yellow-500/10 border border-yellow-500/20 rounded-lg">
                        <AlertTriangle className="w-4 h-4 text-yellow-600 dark:text-yellow-500 mt-0.5 flex-shrink-0" />
                        <div className="space-y-1">
                          <p className="text-sm font-medium text-yellow-900 dark:text-yellow-100">{t.importantNote}</p>
                          <p className="text-sm text-yellow-800 dark:text-yellow-200">{t.importantText}</p>
                        </div>
                      </div>
                    </CardContent>
                  </Card>
                </CollapsibleContent>
              </Collapsible>

              {/* Table Header */}
              <div className="grid grid-cols-12 gap-4 px-3 py-2 text-sm font-medium text-muted-foreground border-b">
                <div className="col-span-3">{t.resourceColumn}</div>
                <div className="col-span-4">{t.urlColumn}</div>
                <div className="col-span-5 text-right">{t.actionsColumn}</div>
              </div>

              {/* Feed Rows */}
              <div className="space-y-2">
                {feeds.map(feed => (
                  <div key={feed.id} className="grid grid-cols-12 gap-4 items-center p-3 border rounded-lg hover:bg-muted/30 transition-colors">
                    {/* Resource Info */}
                    <div className="col-span-3">
                      <div className="flex items-center gap-2">
                        <span className="text-lg flex-shrink-0">{getResourceTypeIcon(feed.resourceType)}</span>
                        <div className="min-w-0">
                          <div className="font-medium truncate">{feed.resourceName}</div>
                          <div className="text-xs text-muted-foreground truncate">{feed.resourceType}</div>
                        </div>
                      </div>
                    </div>

                    {/* URL Input */}
                    <div className="col-span-4">
                      <Input
                        value={feed.url}
                        readOnly
                        className="text-xs font-mono h-9"
                        title={feed.url}
                      />
                    </div>

                    {/* Actions */}
                    <div className="col-span-5">
                      <div className="flex items-center justify-end gap-2">
                        <Badge variant={feed.active ? 'default' : 'secondary'} className="text-xs whitespace-nowrap">
                          {feed.active ? t.active : t.inactive}
                        </Badge>
                        <Button
                          variant="outline"
                          size="sm"
                          onClick={() => handleCopy(feed.url)}
                          className="h-8 whitespace-nowrap"
                        >
                          <Copy className="w-3 h-3 mr-1.5" />
                          {t.copy}
                        </Button>
                        
                        <AlertDialog>
                          <AlertDialogTrigger asChild>
                            <Button
                              variant="outline"
                              size="sm"
                              disabled={regeneratingId === feed.id}
                              className="h-8 whitespace-nowrap"
                            >
                              {regeneratingId === feed.id ? (
                                <RefreshCw className="w-3 h-3 mr-1.5 animate-spin" />
                              ) : (
                                <RefreshCw className="w-3 h-3 mr-1.5" />
                              )}
                              {t.regenerate}
                            </Button>
                          </AlertDialogTrigger>
                          <AlertDialogContent>
                            <AlertDialogHeader>
                              <AlertDialogTitle className="flex items-center gap-2">
                                <AlertTriangle className="w-5 h-5 text-yellow-500" />
                                {t.confirmTitle}
                              </AlertDialogTitle>
                              <AlertDialogDescription>
                                {t.confirmDescription}
                              </AlertDialogDescription>
                            </AlertDialogHeader>
                            <AlertDialogFooter>
                              <AlertDialogCancel>{t.confirmCancel}</AlertDialogCancel>
                              <AlertDialogAction 
                                onClick={() => handleRegenerate(feed.id)}
                                className="bg-destructive text-destructive-foreground hover:bg-destructive/90"
                              >
                                <RefreshCw className="w-4 h-4 mr-2" />
                                {t.confirmRegenerate}
                              </AlertDialogAction>
                            </AlertDialogFooter>
                          </AlertDialogContent>
                        </AlertDialog>
                      </div>
                    </div>
                  </div>
                ))}
              </div>

              {/* Read-only Badge Info */}
              <div className="flex items-start gap-3 p-3 bg-muted/30 rounded-lg">
                <Info className="w-4 h-4 text-muted-foreground mt-0.5 flex-shrink-0" />
                <div className="space-y-1">
                  <div className="flex items-center gap-2">
                    <Badge variant="secondary" className="text-xs">
                      {t.readOnly}
                    </Badge>
                  </div>
                  <p className="text-xs text-muted-foreground leading-relaxed">
                    {t.infoTooltip}
                  </p>
                </div>
              </div>
            </div>
          ) : (
            /* Locked State */
            <div className="relative">
              {/* Blurred preview */}
              <div className="filter blur-sm pointer-events-none space-y-4">
                <div className="grid grid-cols-12 gap-4 py-2 text-sm font-medium text-muted-foreground border-b">
                  <div className="col-span-4">{t.resourceColumn}</div>
                  <div className="col-span-5">{t.urlColumn}</div>
                  <div className="col-span-3">{t.actionsColumn}</div>
                </div>

                <div className="space-y-3">
                  {feeds.slice(0, 2).map(feed => (
                    <div key={feed.id} className="grid grid-cols-12 gap-4 items-center p-3 border rounded-lg">
                      <div className="col-span-4">
                        <div className="flex items-center gap-3">
                          <span className="text-lg">{getResourceTypeIcon(feed.resourceType)}</span>
                          <div>
                            <div className="font-medium">{feed.resourceName}</div>
                            <div className="text-xs text-muted-foreground">{feed.resourceType}</div>
                          </div>
                        </div>
                      </div>
                      <div className="col-span-5">
                        <div className="h-8 bg-muted rounded" />
                      </div>
                      <div className="col-span-3">
                        <div className="flex gap-2">
                          <div className="h-8 w-16 bg-muted rounded" />
                          <div className="h-8 w-20 bg-muted rounded" />
                        </div>
                      </div>
                    </div>
                  ))}
                </div>
              </div>
              
              {/* Overlay */}
              <div className="absolute inset-0 bg-background/80 backdrop-blur-sm rounded-lg flex flex-col items-center justify-center space-y-4">
                <Lock className="w-12 h-12 text-muted-foreground" />
                <div className="text-center space-y-2">
                  <h3 className="font-semibold">{t.proFeature}</h3>
                  <p className="text-sm text-muted-foreground max-w-md">
                    {t.proDescription}
                  </p>
                </div>
                <Button className="elegant-button">
                  <Zap className="w-4 h-4 mr-2" />
                  {t.unlockPro}
                </Button>
              </div>
            </div>
          )}
        </CardContent>
      </Card>
    </TooltipProvider>
  );
}