spring:
  application:
    name: servicebooking

  # Виртуальные потоки - ключевая фича для производительности
  threads:
    virtual:
      enabled: true

  # База данных - PostgreSQL 16
  datasource:
    url: jdbc:postgresql://localhost:5432/booking_db
    username: booking_user
    password: ${DB_PASSWORD:booking_password}
    driver-class-name: org.postgresql.Driver
    hikari:
      # Настройки пула для высокой нагрузки
      maximum-pool-size: 50
      minimum-idle: 10
      connection-timeout: 3000
      idle-timeout: 600000
      max-lifetime: 1800000
      # Оптимизации для PostgreSQL
      data-source-properties:
        cachePrepStmts: true
        prepStmtCacheSize: 250
        prepStmtCacheSqlLimit: 2048
        useServerPrepStmts: true

  # Redis для кеширования и блокировок
  data:
    redis:
      host: localhost
      port: 6379
      password: ${REDIS_PASSWORD:}
      timeout: 2s
      lettuce:
        pool:
          max-active: 50
          max-idle: 10
          min-idle: 5

  # RabbitMQ для событий
  rabbitmq:
    host: localhost
    port: 5672
    username: guest
    password: guest
    virtual-host: /
    # Настройки для надежной доставки
    publisher-confirm-type: correlated
    publisher-returns: true
    template:
      mandatory: true
      retry:
        enabled: true
        initial-interval: 1s
        max-attempts: 3
    listener:
      simple:
        acknowledge-mode: manual
        prefetch: 10
        concurrency: 5
        max-concurrency: 20

  # Миграции БД
  flyway:
    enabled: true
    baseline-on-migrate: true
    locations: classpath:db/migration

  # Actuator для мониторинга
  actuator:
    endpoints:
      web:
        exposure:
          include: health, metrics, prometheus, info
    metrics:
      export:
        prometheus:
          enabled: true
      tags:
        application: ${spring.application.name}

# gRPC сервер
grpc:
  server:
    port: 9090
    enable-reflection: true # Для отладки
    max-inbound-message-size: 4194304 # 4MB
    keep-alive-time: 30s
    keep-alive-timeout: 5s

# Настройки приложения
booking:
  # Настройки блокировок
  lock:
    ttl-seconds: 5
    wait-timeout-seconds: 2
    retry-attempts: 3

  # Outbox publisher
  outbox:
    batch-size: 100
    publish-interval-ms: 1000
    max-retry-attempts: 5

  # Deadlines для операций
  deadlines:
    create-ms: 500
    confirm-ms: 300
    cancel-ms: 300
    get-ms: 150

# Логирование
logging:
  level:
    root: INFO
    com.qodo.booking: DEBUG
    org.jooq.tools.LoggerListener: DEBUG # SQL запросы
    io.grpc: INFO
  pattern:
    console: "%d{yyyy-MM-dd HH:mm:ss} - %msg%n"
    file: "%d{yyyy-MM-dd HH:mm:ss} [%thread] %-5level %logger{36} - %msg%n"

# Web сервер (Undertow)
server:
  port: 8080
  undertow:
    # Оптимизация для высокой нагрузки
    io-threads: ${SERVER_IO_THREADS:16}
    worker-threads: ${SERVER_WORKER_THREADS:200}
    buffer-size: 1024
    direct-buffers: true
  shutdown: graceful

management:
  endpoints:
    web:
      base-path: /actuator
  endpoint:
    health:
      show-details: always
  tracing:
    sampling:
      probability: 0.1 # 10% трейсов в production