import React, { useState } from 'react';
import { Bell, Mail, MessageSquare, Phone, Clock, UserCheck, Calendar, Gift, Volume2, ArrowLeft } from 'lucide-react';
import { Card, CardContent, CardHeader, CardTitle } from './ui/card';
import { Switch } from './ui/switch';
import { Badge } from './ui/badge';
import { Separator } from './ui/separator';
import { Button } from './ui/button';
import { AutomationToggle } from './ui/automation-toggle';
import { useTelegram } from '../hooks/useTelegram';

interface NotificationTrigger {
  id: string;
  name: string;
  description: string;
  icon: React.ComponentType<{ className?: string }>;
  channels: ('telegram' | 'sms' | 'whatsapp' | 'email')[];
  enabled: boolean;
  preview: {
    telegram?: string;
    sms?: string;
    whatsapp?: string;
    email?: string;
  };
}

interface NotificationSettingsProps {
  onBack?: () => void;
}

export function NotificationSettings({ onBack }: NotificationSettingsProps) {
  const { hapticFeedback } = useTelegram();
  
  const [triggers, setTriggers] = useState<NotificationTrigger[]>([
    {
      id: 'booking-reminder-24h',
      name: '–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –∑–∞ 24 —á–∞—Å–∞',
      description: '–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç—É –æ –∑–∞–ø–∏—Å–∏',
      icon: Clock,
      channels: ['telegram', 'sms'],
      enabled: true,
      preview: {
        telegram: 'üïê –ù–∞–ø–æ–º–∏–Ω–∞–µ–º –æ –∑–∞–ø–∏—Å–∏ –∑–∞–≤—Ç—Ä–∞ –≤ 14:30 –Ω–∞ –º–∞–Ω–∏–∫—é—Ä –∫ –ê–Ω–Ω–µ –ò–≤–∞–Ω–æ–≤–æ–π.\nüìç –°–∞–ª–æ–Ω "–ö—Ä–∞—Å–æ—Ç–∞", —É–ª. –ü—É—à–∫–∏–Ω–∞ 10\nüìû –ò–∑–º–µ–Ω–∏—Ç—å: t.me/salon_bot',
        sms: '–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ: –∑–∞–≤—Ç—Ä–∞ 14:30 - –º–∞–Ω–∏–∫—é—Ä, –ê–Ω–Ω–∞ –ò–≤–∞–Ω–æ–≤–∞. –°–∞–ª–æ–Ω –ö—Ä–∞—Å–æ—Ç–∞, —É–ª.–ü—É—à–∫–∏–Ω–∞ 10. –ò–∑–º–µ–Ω–∏—Ç—å: salon.ru/b123'
      }
    },
    {
      id: 'booking-reminder-2h',
      name: '–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –∑–∞ 2 —á–∞—Å–∞',
      description: '–°—Ä–æ—á–Ω–æ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –ø–µ—Ä–µ–¥ –≤–∏–∑–∏—Ç–æ–º',
      icon: Clock,
      channels: ['telegram', 'sms', 'whatsapp'],
      enabled: true,
      preview: {
        telegram: '‚è∞ –ß–µ—Ä–µ–∑ 2 —á–∞—Å–∞ –∑–∞–ø–∏—Å—å –Ω–∞ –º–∞–Ω–∏–∫—é—Ä –∫ –ê–Ω–Ω–µ –ò–≤–∞–Ω–æ–≤–æ–π!\nüìç –°–∞–ª–æ–Ω –ö—Ä–∞—Å–æ—Ç–∞, —É–ª.–ü—É—à–∫–∏–Ω–∞ 10\n‚ö° –£—Å–ø–µ–π—Ç–µ –ø–æ–¥–≥–æ—Ç–æ–≤–∏—Ç—å—Å—è',
        sms: '–ß–µ—Ä–µ–∑ 2 —á–∞—Å–∞: –º–∞–Ω–∏–∫—é—Ä, –ê–Ω–Ω–∞ –ò–≤–∞–Ω–æ–≤–∞. –°–∞–ª–æ–Ω –ö—Ä–∞—Å–æ—Ç–∞, —É–ª.–ü—É—à–∫–∏–Ω–∞ 10',
        whatsapp: '‚è∞ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ!\n–ß–µ—Ä–µ–∑ 2 —á–∞—Å–∞ —É –≤–∞—Å –∑–∞–ø–∏—Å—å:\nüíÖ –ú–∞–Ω–∏–∫—é—Ä —É –ê–Ω–Ω—ã –ò–≤–∞–Ω–æ–≤–æ–π\nüìç –°–∞–ª–æ–Ω –ö—Ä–∞—Å–æ—Ç–∞, —É–ª.–ü—É—à–∫–∏–Ω–∞ 10'
      }
    },
    {
      id: 'no-show',
      name: '–ö–ª–∏–µ–Ω—Ç –Ω–µ –ø—Ä–∏—à–µ–ª',
      description: '–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –æ –ø—Ä–æ–ø—É—Å–∫–µ',
      icon: UserCheck,
      channels: ['telegram'],
      enabled: true,
      preview: {
        telegram: '‚ùå No-show: –ê–Ω–Ω–∞ –°–º–∏—Ä–Ω–æ–≤–∞ –Ω–µ –ø—Ä–∏—à–ª–∞ –Ω–∞ –º–∞–Ω–∏–∫—é—Ä –≤ 14:30\nüë©‚ÄçüíÑ –ú–∞—Å—Ç–µ—Ä: –ê–Ω–Ω–∞ –ò–≤–∞–Ω–æ–≤–∞ –æ—Å–≤–æ–±–æ–¥–∏–ª–∞—Å—å\nüìû +7999123456'
      }
    },
    {
      id: 'birthday',
      name: '–î–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è –∫–ª–∏–µ–Ω—Ç–∞',
      description: '–ü–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏–µ –∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –∑–∞–ø–∏—Å–∏',
      icon: Gift,
      channels: ['telegram', 'whatsapp'],
      enabled: false,
      preview: {
        telegram: 'üéâ –° –î–Ω–µ–º —Ä–æ–∂–¥–µ–Ω–∏—è, –ê–Ω–Ω–∞!\nüéÅ –î–∞—Ä–∏–º —Å–∫–∏–¥–∫—É 20% –Ω–∞ –ª—é–±—É—é —É—Å–ª—É–≥—É –¥–æ –∫–æ–Ω—Ü–∞ –º–µ—Å—è—Ü–∞\nüìÖ –ó–∞–ø–∏—Å–∞—Ç—å—Å—è: t.me/salon_bot',
        whatsapp: 'üéÇ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º —Å –î–Ω–µ–º —Ä–æ–∂–¥–µ–Ω–∏—è, –ê–Ω–Ω–∞!\nüéÅ –°–ø–µ—Ü–∏–∞–ª—å–Ω–æ –¥–ª—è –≤–∞—Å —Å–∫–∏–¥–∫–∞ 20%\nüíÖ –ó–∞–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –ª—é–±–∏–º—É—é –ø—Ä–æ—Ü–µ–¥—É—Ä—É!'
      }
    },
    {
      id: 'new-booking',
      name: '–ù–æ–≤–∞—è –∑–∞–ø–∏—Å—å',
      description: '–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –æ –Ω–æ–≤–æ–π –∑–∞–ø–∏—Å–∏',
      icon: Calendar,
      channels: ['telegram'],
      enabled: true,
      preview: {
        telegram: 'üìÖ –ù–æ–≤–∞—è –∑–∞–ø–∏—Å—å!\nüë§ –ê–Ω–Ω–∞ –°–º–∏—Ä–Ω–æ–≤–∞ (+7999123456)\nüíÖ –ú–∞–Ω–∏–∫—é—Ä ‚Ä¢ 14:30 ‚Ä¢ –∑–∞–≤—Ç—Ä–∞\nüë©‚ÄçüíÑ –ú–∞—Å—Ç–µ—Ä: –ê–Ω–Ω–∞ –ò–≤–∞–Ω–æ–≤–∞'
      }
    }
  ]);

  const [channels, setChannels] = useState({
    telegram: true,
    sms: false,
    whatsapp: true,
    email: false,
    sound: true,
  });

  const handleTriggerToggle = (triggerId: string) => {
    hapticFeedback.light();
    setTriggers(prev => prev.map(trigger =>
      trigger.id === triggerId
        ? { ...trigger, enabled: !trigger.enabled }
        : trigger
    ));
  };

  const handleChannelToggle = (channel: keyof typeof channels) => {
    hapticFeedback.light();
    setChannels(prev => ({ ...prev, [channel]: !prev[channel] }));
  };

  const getChannelIcon = (channel: string) => {
    switch (channel) {
      case 'telegram': return MessageSquare;
      case 'sms': return MessageSquare;
      case 'whatsapp': return Phone;
      case 'email': return Mail;
      default: return Bell;
    }
  };

  const getChannelColor = (channel: string) => {
    switch (channel) {
      case 'telegram': return 'text-blue-500 bg-blue-500/10';
      case 'sms': return 'text-green-500 bg-green-500/10';
      case 'whatsapp': return 'text-green-600 bg-green-600/10';
      case 'email': return 'text-purple-500 bg-purple-500/10';
      default: return 'text-gray-500 bg-gray-500/10';
    }
  };

  const getChannelName = (channel: string) => {
    switch (channel) {
      case 'telegram': return 'Telegram';
      case 'sms': return 'SMS';
      case 'whatsapp': return 'WhatsApp';
      case 'email': return 'Email';
      default: return channel;
    }
  };

  return (
    <div className="space-y-6">
      <div className="flex items-center gap-3">
        {onBack && (
          <Button
            variant="ghost"
            size="sm"
            onClick={onBack}
            className="p-2"
          >
            <ArrowLeft className="w-4 h-4" />
          </Button>
        )}
        <div>
          <h2 className="gradient-text-elegant">–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è</h2>
          <p className="text-muted-foreground">–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –∫–ª–∏–µ–Ω—Ç–æ–≤ –∏ –ø–µ—Ä—Å–æ–Ω–∞–ª–∞</p>
        </div>
      </div>

      {/* Channel Settings */}
      <Card className="clean-card">
        <CardHeader>
          <CardTitle className="flex items-center gap-3">
            <div className="w-10 h-10 bg-primary/10 rounded-xl flex items-center justify-center">
              <Bell className="h-5 w-5 text-primary" />
            </div>
            <div>
              <h3>–ö–∞–Ω–∞–ª—ã —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π</h3>
              <p className="text-sm text-muted-foreground font-normal">
                –í–∫–ª—é—á–∏—Ç–µ –Ω—É–∂–Ω—ã–µ —Å–ø–æ—Å–æ–±—ã –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
              </p>
            </div>
          </CardTitle>
        </CardHeader>
        
        <CardContent className="space-y-4">
          {Object.entries(channels).map(([channel, enabled]) => {
            const Icon = getChannelIcon(channel);
            const colorClass = getChannelColor(channel);
            
            if (channel === 'sound') {
              return (
                <div key={channel} className="flex items-center justify-between">
                  <div className="flex items-center gap-3">
                    <div className="w-8 h-8 bg-orange-500/10 rounded-lg flex items-center justify-center">
                      <Volume2 className="h-4 w-4 text-orange-500" />
                    </div>
                    <div>
                      <span className="font-medium">–ó–≤—É–∫–æ–≤—ã–µ —Å–∏–≥–Ω–∞–ª—ã</span>
                      <p className="text-xs text-muted-foreground">–ó–≤—É–∫ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π</p>
                    </div>
                  </div>
                  <Switch
                    checked={enabled}
                    onCheckedChange={() => handleChannelToggle(channel as keyof typeof channels)}
                  />
                </div>
              );
            }
            
            return (
              <div key={channel} className="flex items-center justify-between">
                <div className="flex items-center gap-3">
                  <div className={`w-8 h-8 rounded-lg flex items-center justify-center ${colorClass}`}>
                    <Icon className="h-4 w-4" />
                  </div>
                  <div>
                    <span className="font-medium">{getChannelName(channel)}</span>
                    <p className="text-xs text-muted-foreground">
                      {channel === 'telegram' ? '–ë—ã—Å—Ç—Ä—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤ –º–µ—Å—Å–µ–Ω–¥–∂–µ—Ä' :
                       channel === 'sms' ? 'SMS –Ω–∞ –Ω–æ–º–µ—Ä –∫–ª–∏–µ–Ω—Ç–∞' :
                       channel === 'whatsapp' ? '–°–æ–æ–±—â–µ–Ω–∏—è WhatsApp Business' :
                       'Email —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è'}
                    </p>
                  </div>
                </div>
                <Switch
                  checked={enabled}
                  onCheckedChange={() => handleChannelToggle(channel as keyof typeof channels)}
                />
              </div>
            );
          })}
        </CardContent>
      </Card>

      {/* Next Visit Automation */}
      <AutomationToggle
        locale="ru"
        initialSettings={{
          autoNextVisit: true,
          autoMode: 'admin_only',
          quietHours: '22:00‚Äì08:00',
          frequency: 'on_completion'
        }}
        onChange={(settings) => {
          console.log('Automation settings changed:', settings);
          hapticFeedback.light();
        }}
      />

      {/* Notification Triggers */}
      <div className="space-y-4">
        <h3 className="font-semibold">–¢—Ä–∏–≥–≥–µ—Ä—ã —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π</h3>
        
        {triggers.map((trigger) => {
          const Icon = trigger.icon;
          
          return (
            <Card key={trigger.id} className={`clean-card transition-all duration-200 ${
              trigger.enabled ? 'border-primary/20 bg-primary/2' : ''
            }`}>
              <CardContent className="p-4">
                <div className="space-y-4">
                  {/* Header */}
                  <div className="flex items-start justify-between">
                    <div className="flex items-start gap-3">
                      <div className={`w-10 h-10 rounded-xl flex items-center justify-center ${
                        trigger.enabled ? 'bg-primary text-primary-foreground' : 'bg-muted text-muted-foreground'
                      }`}>
                        <Icon className="h-5 w-5" />
                      </div>
                      
                      <div className="flex-1">
                        <h4 className="font-medium">{trigger.name}</h4>
                        <p className="text-sm text-muted-foreground">{trigger.description}</p>
                        
                        {/* Channels */}
                        <div className="flex items-center gap-2 mt-2">
                          {trigger.channels.map((channel) => {
                            const ChannelIcon = getChannelIcon(channel);
                            return (
                              <Badge 
                                key={channel} 
                                variant={trigger.enabled ? "default" : "secondary"}
                                className="text-xs"
                              >
                                <ChannelIcon className="h-3 w-3 mr-1" />
                                {getChannelName(channel)}
                              </Badge>
                            );
                          })}
                        </div>
                      </div>
                    </div>
                    
                    <Switch
                      checked={trigger.enabled}
                      onCheckedChange={() => handleTriggerToggle(trigger.id)}
                    />
                  </div>

                  {/* Preview Messages */}
                  {trigger.enabled && (
                    <div className="space-y-3 pt-3 border-t border-border/50">
                      <h5 className="text-sm font-medium text-muted-foreground">–ü—Ä–µ–≤—å—é —Å–æ–æ–±—â–µ–Ω–∏–π:</h5>
                      
                      {Object.entries(trigger.preview).map(([channel, message]) => {
                        const ChannelIcon = getChannelIcon(channel);
                        const colorClass = getChannelColor(channel);
                        
                        return (
                          <div key={channel} className="space-y-2">
                            <div className="flex items-center gap-2">
                              <div className={`w-5 h-5 rounded flex items-center justify-center ${colorClass}`}>
                                <ChannelIcon className="h-3 w-3" />
                              </div>
                              <span className="text-sm font-medium">{getChannelName(channel)}</span>
                            </div>
                            
                            <div className="p-3 rounded-lg bg-muted/30 border text-sm">
                              <pre className="whitespace-pre-wrap font-normal">{message}</pre>
                            </div>
                          </div>
                        );
                      })}
                    </div>
                  )}
                </div>
              </CardContent>
            </Card>
          );
        })}
      </div>

      {/* Statistics */}
      <Card className="clean-card">
        <CardHeader>
          <CardTitle>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π</CardTitle>
        </CardHeader>
        
        <CardContent>
          <div className="grid grid-cols-2 md:grid-cols-4 gap-4">
            <div className="text-center p-3 rounded-lg bg-muted/30">
              <p className="text-2xl font-semibold text-primary">126</p>
              <p className="text-xs text-muted-foreground">–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Å–µ–≥–æ–¥–Ω—è</p>
            </div>
            
            <div className="text-center p-3 rounded-lg bg-muted/30">
              <p className="text-2xl font-semibold text-green-600">94%</p>
              <p className="text-xs text-muted-foreground">–î–æ—Å—Ç–∞–≤–ª–µ–Ω–æ</p>
            </div>
            
            <div className="text-center p-3 rounded-lg bg-muted/30">
              <p className="text-2xl font-semibold text-blue-600">78%</p>
              <p className="text-xs text-muted-foreground">–ü—Ä–æ—á–∏—Ç–∞ÔøΩÔøΩ–æ</p>
            </div>
            
            <div className="text-center p-3 rounded-lg bg-muted/30">
              <p className="text-2xl font-semibold text-orange-600">12</p>
              <p className="text-xs text-muted-foreground">No-show —Å–Ω–∏–∂–µ–Ω–æ</p>
            </div>
          </div>
        </CardContent>
      </Card>
    </div>
  );
}